240828
네트워크 스트럭쳐
1. 네트워크 엣지 ㅡ> 호스트, 어플리케이션
2. 네트워크 코어 ㅡ> 라우터
3. 링크

호스트 ㅡ> 컴퓨터 스마트폰 등
어플리케이션 ㅡ> 웹, 이메일 등

240831
네트워크 엣지
ㅡ> 네트워크 가장자리의 장치와 시스템
ㅡ> 네트워크의 최종사용자와 가까운 부분
호스트
ㅡ> 사용자 단말기 (컴퓨터, 스마트폰 등)
ㅡ> 어플리케이션(웹, 이메일 등) 실행하는 시스템 

240901
클라이언트/서버 모델
ㅡ> 서버는 항상 켜져있음
ㅡ> 클라이언트가 서버에 서비스를 요청하고 수신함
예) 웹 브라우저/서버, 이메일 클라이언트/서버
웹 브라우저(클라이언트)가 웹 서버에 페이지 요청을 보내면, 서버는 해당 페이지를 반환합니다.

인터넷이 제공하는 통신 서비스
1. connection-oriented service (연결 지향 서비스) : TCP
2. connectionless service (비연결형 서비스) : UDP

TCP
ㅡ> Reliable : 보낸게 그대로 전달 
ㅡ> in-order byte-stream data transfer: 보낸 순서 지키면서 전달 
ㅡ> Flow control (흐름 제어)
ㅡ>ㅡ> sender가 data를 보내는 속도를 조절
ㅡ>ㅡ> Receiver가 처리할 수 있는 속도에 맞춤
ㅡ> Congestion control (혼잡 제어)
ㅡ>ㅡ> 네트워크가 혼잡할 때 sender가 전송속도 줄임
ㅡ>ㅡ> 데이터 손실 방지, 네트워크 혼잡 상태 완화

UDP
ㅡ> 아무것도 안해줌
ㅡ> data 유실돼도 상관없고 그럴때 사용
ㅡ> 예시) 음성통화 ㅡ> 오디오패킷 몇개 손실돼도 사람이 잘 인지 못 함






240902
패킷 (Packet)
ㅡ> 메세지 담고있는 편지봉투
ㅡ> 보안을 위해 등기를 쓰듯이, TCP를 사용 (reliable)
ㅡ> 등기를 쓰면 비용 발생하듯, TCP 사용하면 리소스 비용 발생

프로토콜
ㅡ> 통신 규약
ㅡ> 사람끼리 대화할 때 어느정도 규범과 관습이 있는 것 처럼, 기계끼리도 있음
ㅡ> 상식이 안맞는 사람끼리 대화가 안통하 듯이, 프로토콜이 안맞으면 통신 안됨
ㅡ> 예) 한쪽은 TCP, 한쪽은 UDP면 통신안됨

네트워크 코어
ㅡ> 라우터들 집합
ㅡ> 라우터들이 데이터 목적지까지 전달

라우터가 데이터 전달하는 방식 [how]
1. 서킷 스위칭
2. 패킷 스위칭 ㅡ> 인터넷

서킷 스위칭
ㅡ> 길을 예약해놓고 사용자만을 위해 사용
ㅡ> 대통령이 이동할 길 예약해놓는 것처럼
ㅡ> 예전 유선 전화망 방식

패킷 스위칭
ㅡ> 유저거 패킷 보내주는대로 받아서 포워딩

서킷 스위칭 vs 패킷 스위칭
ㅡ> 패킷 스위칭은 유저 수 제한이 없음
ㅡ> 대신 delay가 발생할 수 있는 듯(?)

패킷 스위칭 딜레이 4가지
1. nodal processing delay
ㅡ> 패킷 검사해서 목적지 확인
2. queueing delay
ㅡ> 라우터 out속도 보다 in속도가 빨라서 패킷 대기열(queue) 발생
ㅡ> 큐가 넘치면 data loss (패킷 loss는 대부분 여기서 발생)
3. trasmission delay
ㅡ> 패킷 크기에 비해 전송속도가 느려서 발생 (파이프가 좁은걸 상상)
4. Propagation delay
ㅡ> 링크의 물리적 거리를 빛의 속도로 가느라 발생 
ㅡ> 이건 어쩔 수 없다.

240903
패킷 스위칭 딜레이 줄이는법
1. nodal processing delay
ㅡ> 라우터 성능 개선
2. queueing delay
ㅡ> 사용자가 몰리는걸 통제할 순 없어서 개선x
3. transmission delay
ㅡ> 케이블 공사해서 bandwith 넓힘
4. propagation delay
ㅡ> 빛의속도를 바꿀 수 없어서 개선x

(Q) 패킷 loss가 발생하는데, TCP는 어떻게 신뢰성을 유지하는가?
(A) 패킷 재전송

패킷 재전송
ㅡ> 네트워크 엣지(서버, 클라이언트)에서 관리한다
ㅡ> 네트워크 코어는 전송속도를 위해, 뇌빼고 단순작업만 한다
ㅡ> 복잡한 로직은 네트워크 엣지에서 관리...



240904
차량 행렬 비
차량 10대가 같이 다녀야 하는 상황

차량 1대
ㅡ> 비트

차량 10대
ㅡ> 패킷

차량 속도 (시속 100km)
ㅡ> propagation delay

톨게이트 통과시간 (한대당 12초)
ㅡ> 12*10 = 120초
ㅡ> transmission delay

*패킷은 청크다
ㅡ> 패킷 앞부분이 먼저 도착했다고, 먼저 라우터 지나서 가는게 아니라, 뒷부분이 도달할 때까지 기다
ㅡ> 패킷은 한 묶음으로 봐야 함


네트워크 계층 구조
app ㅡ> HTTP
transport ㅡ> TCP, UDP
network ㅡ> IP
link ㅡ> WIFI, LTE, 이더넷
physicla layer


240906
HTTP
ㅡ> HyperText Transfer Protocol

명령어 2가지
ㅡ> 1. HTTP request : 서버에 HyperText 요청
ㅡ> 2. HTTP response : 서버에서 HtperText 보내줌


